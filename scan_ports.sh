#!/usr/bin/env bash
#
# scan_ports.sh - Este programa vai escanear portas de serviços de rede abertas na máquina
#
# Autor     : Matheus Rodrigues (mcarvalho)
# Manutenção: Matheus Rodrigues (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Descreva aqui em baixo como o programa funciona detalhadamente
# 
# Exemplos:
#   $ ./nome_do_programa.sh parametro1
#   saida_tela?
#   $ ./nome_do_programa.sh parametro2
#   saida_tela?
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 dd/mm/aaaa, autor
#   - Descreva oque tem nesta versão em tópicos
#   - Foi mudado o layout do programa
#   - Foi acrescentado uma nova função ao programa
#
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - 
#    Arquitetura         - 
#    Versão Kernel       - 
#    Versão Bash         - 
#
# ---------------------------------------------------------------------------------------
# ---------------------------------- Variaveis Globais ----------------------------------
declare -A coresDoPrograma # Declarando um array associativo para trabalhar com cores
coresDoPrograma["vermelho"]="\e[31;1m"
coresDoPrograma["verde"]="\e[32;1m"
coresDoPrograma["normal"]="\e[m"

menuAjuda="
Modos de uso:
    -a | --ajuda) Exibe menu de ajuda

    -V | --versao) Exibe a versão do programa

    -v | --verboso) Exibe a saida verbosa do programa

    -e | --endereco) <xxx.xxx.xxx> <well-know-ports>
        Por padrão ele vai verificar as Well-Know-Ports se o parâmetro -p não for informado
        $0 -e 192.168.0.1 0-1023 

    -p | --portas) <xx> ou um intevalo de valores <x-xxx>
        $0 -e 192.168.0.1 -p 22
        $0 -e 192.168.0.1 -p 0-100
"
versaoDoPrograma="${0:2} - v1.0"

# --------------------------------------- Funções ---------------------------------------
function validarEnderecoIP() {
    # ReGex com padrão de endereço que o usuário deve informar
    local padraoDeEndereco="^([0-9]{1,3}\.){3}[0-9]{1,3}$" 
    # Validando a ReGex que o usuário informou realmente é um endereço IP
    
    if [[ "$1" =~ $padraoDeEndereco ]]; then 
        echo -e "Endereço IP validado: \t${coresDoPrograma['verde']}[OK]${coresDoPrograma['normal']}"    
        return 0 
    else
        echo -e "Endereço IP validado: \t${coresDoPrograma['vermelho']}[NÃO]${coresDoPrograma['normal']}"    
        return 1 # Usuário não informou um endereço válido
    fi
}

function validarEnderecoComunicando() {
    if (ping -c1 -w1 "$1" 1>/dev/null 2>&-); then
        echo -e "Endereço IP Comun.: \t${coresDoPrograma["verde"]}[OK]${coresDoPrograma["normal"]}" 
        return 0
    else
        echo -e "Endereço IP Comun.: \t${coresDoPrograma["vermelho"]}[NÃO]${coresDoPrograma["normal"]}" 
        return 1
    fi
}

function escanearPortas() {
    echo "Escaneando portas"
}
# --------------------------------- Execução do Programa ---------------------------------
while [ -n "$1" ]; do
    case "$1" in
        -a | --ajuda) 
            echo "$menuAjuda" 
            exit 0
        ;;
        -V | --versao) 
            echo "$versaoDoPrograma" 
            exit 0
        ;;
        -v | --verboso) 
            :
            exit 0
        ;;
        -e | --endereco)
            if (validarEnderecoIP "$2" && validarEnderecoComunicando "$2"); then
                escanearPortas
                exit 0
            else
                exit 1
            fi
        ;; 
        *)
            echo "$menuAjuda"
            exit 1
        ;;
    esac
done

echo "$menuAjuda"
