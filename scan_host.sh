#!/usr/bin/env bash
#
# scan_host.sh - Vai escanear todos os hosts ativos [UP] em uma rede de classe C
#
# Autor     : Matheus Rodrigues - (mcarvalho)
# Manutenção: Matheus Rodrigues - (mcarvalho)
# Contato   : matheusrsp3@gmail.com
#
# ---------------------------------------------------------------------------------------
# Descrição do programa:
#   Este programa tem a função de escanear uma rede de classe C, buscando todos os hosts
#   que estão ativos [UP] na rede, através da troca de pacotes ICMP do comando ping
# 
# Exemplos:
#   $ ./scan_host.sh -s <xxx.xxx.xxx>
#   $ Vai exibir na tela somente os hosts [UP] na rede
#
#   $ ./scan_host.sh -escanear--verboso <xxx.xxx.xxx>
#   $ Vai exibir na tela a saída completa do programa inclusive os hosts [DOWN] na rede
#
# ---------------------------------------------------------------------------------------
# Histórico:
#   v1.0 04/08/2023, Matheus Rodrigues
#   - Inicio do programa
#   
# ---------------------------------------------------------------------------------------
# Testado:
#    Sistema Operacional - Linux Mint 21.1
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 5.15.0-78-generic
#    Versão Bash         - 5.1.16
#
#    Sistema Operacional - Kali GNU/Linux 2023.2
#    Arquitetura         - x86-64
#    Versão Kernel       - Linux 6.3.0-kali1-amd64
#    Versão Bash         - 5.2.15
#
# ---------------------------------- Variaveis Globais ----------------------------------
menuAjuda="
Modos de uso:
    -h) Exibe este menu de ajuda
    -V) Exibe a versão do programa
    -s) <xxx.xxx.xxx> - Retorna somente os hosts [UP]
    -escanear--verboso) <xxx.xxx.xxx> - Retorna a saida completa inclusive os hosts [DOWN]
"
versaoPrograma="${0//.\//} - v1.0"

corVermelho="\e[31;1m"
corVerde="\e[32;1m"
corNormal="\e[m"

chaveAtivarSaidaCompleta=0
#
# --------------------------------------- Funções ---------------------------------------
function escanearRede() {
    if [ -n "$1" ]; then # [true] - Se o primeiro parâmetro da função não estiver vázio

        # Expressão regular que vai definir os padrões que o usuário deve seguir ao informar
        # o endereço de uma rede
        local padraoRede="^([0-9]{1,3}\.){2}[0-9]{1,3}$"

        # Antes de inciar a varredura valide se a rede que o usuário informou ao programa 
        # é uma rede válida
        if [[ "$1" =~ $padraoRede ]]; then # [true] - Se a rede for válida
            echo -e "Aguarde iniciando varredura...\n"
            local contadorDeHostsUP=0
            for host in {0..255}; do # Vai varrer 256 Hosts de uma rede de classe C
                if (ping -c1 -W0.5 "${1}.$host" 1>/dev/null 2>&-); then
                    echo -e "Host ${1}.$host ${corVerde}\t[UP]$corNormal"
                    ((contadorDeHostsUP++))
                elif (("$chaveAtivarSaidaCompleta" == "1")); then
                    echo -e "Host ${1}.$host ${corVermelho}\t[DOWN]$corNormal"
                fi
            done
            echo -e "\nHost(s) ${corVerde}[UP]${corNormal} - $contadorDeHostsUP"
            echo -e "\nVarredura de rede finalizada com sucesso!"
        else # Indique o formato correto de rede que o usuário deve informar ao programa
            echo -e "Por favor insira uma rede válida no formato $corVermelho<xxx.xxx.xxx>$corNormal"
        fi
    else # Se a rede não for informada ao programa
        echo -e "Por favor passe a rede no formato $corVermelho<xxx.xxx.xxx>$corNormal"
    fi
}
#
# --------------------------------- Execução do Programa ---------------------------------
while [ -n "$1" ]; do # [true] - Se o primeiro parâmetro do programa não estiver vázio
    case "$1" in
        -h) echo "$menuAjuda" && exit 0                                               ;;
        -V) echo "$versaoPrograma" && exit 0                                          ;;
        -s) escanearRede "$2" && exit 0                                               ;;
        -escanear--verboso) chaveAtivarSaidaCompleta=1 && escanearRede "$2" && exit 0 ;;
        *) echo "$menuAjuda" && exit 1                                                ;; 
    esac
done

echo "$menuAjuda" # Se o usuário não passar nenhum parâmetro ao programa
